openapi: 3.0.0
info:
  title: 'Пример реализации социальной сети'
  description: "## Соцальная сеть Шаг и компания \n\n Наша проба сделать хорошую социальную сеть"
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
    description: 'Local API server'
paths:
  /api/account/avatar_upload:
    post:
      tags:
        - account
      summary: 'Update user avatar'
      operationId: api.account.avatar-upload
      requestBody:
        description: 'upload avatar '
        required: true
        content:
          application/json:
            schema:
              properties:
                id:
                  type: integer
                  example: '101'
                avatar:
                  type: file
                  example: 'image content'
              type: object
      responses:
        '200':
          description: 'avatar his updated'
          content:
            application/json:
              schema:
                properties:
                  status: { type: string, example: 'true' }
                type: object
  '/api/auth/confirm_email/{id}/{token}':
    head:
      tags:
        - auth
      summary: 'Confirm a email'
      operationId: api.auth.confirm_email
      requestBody:
        description: 'Token for email confirmation'
        required: true
        content:
          application/json:
            schema:
              properties:
                id:
                  type: string
                  example: '101'
                token:
                  type: string
                  example: bb93c30a-9cac-4827-924b-1be4dfe1ceb8
              type: object
      responses:
        '200':
          description: 'email confirmed'
          content:
            application/json:
              schema:
                properties:
                  status: { type: string, example: 'Redirect to /' }
                type: object
  /api/auth/login:
    post:
      tags:
        - auth
      summary: 'Login a user'
      operationId: api.auth.login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessLoginResource'
        '422':
          description: 'invalid password'
          content:
            application/json:
              schema:
                properties:
                  status: { type: string, example: error }
                  message: { type: string, example: Unauthorized }
                type: object
  /api/auth/registerPage:
    post:
      tags:
        - auth
      summary: 'Register a user'
      operationId: api.auth.registerPage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessLoginResource'
        '422':
          description: 'password confirmation'
          content:
            application/json:
              schema:
                properties:
                  status: { type: string, example: error }
                  message: { type: string, example: 'password confirmation.' }
                type: object
  /api/category:
    get:
      tags:
        - categories
      summary: 'Get all categories'
      operationId: api.category.index
      responses:
        '200':
          description: 'retun all categories'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
    put:
      tags:
        - categories
      summary: 'Update category per id'
      operationId: api.category.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                id:
                  type: integer
                  example: '9'
                name:
                  type: string
                  example: 'new name'
              type: object
      responses:
        '200':
          description: 'return category'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          description: 'return error if category is not exists'
          content:
            application/json:
              schema:
                properties:
                  error: { type: string, example: 'not found' }
                type: object
    post:
      tags:
        - categories
      summary: 'Add category'
      operationId: api.category.store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '200':
          description: 'return new created category'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          description: 'return error if category is exitst'
          content:
            application/json:
              schema:
                properties:
                  error: { type: string, example: 'this category already exists' }
                type: object
  '/api/category/{$id}':
    get:
      tags:
        - categories
      summary: 'Show category per id'
      operationId: api.category.show
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                id:
                  type: integer
                  example: '9'
              type: object
      responses:
        '200':
          description: 'return category'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '400':
          description: 'return error if category is not exists'
          content:
            application/json:
              schema:
                properties:
                  error: { type: string, example: 'not found' }
                type: object
    delete:
      tags:
        - categories
      summary: 'Delete category per id'
      operationId: api.category.destroy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                id:
                  type: integer
                  example: '9'
              type: object
      responses:
        '200':
          description: 'return message'
          content:
            application/json:
              schema:
                properties:
                  string: { type: string, example: 'deleted category: 9' }
                type: object
        '400':
          description: 'return error if category is not exists'
          content:
            application/json:
              schema:
                properties:
                  error: { type: string, example: 'not found' }
                type: object
  '/api/post/{$category_id}':
    get:
      tags:
        - post
      summary: 'Get all posts on category'
      operationId: api.post.index
      responses:
        '200':
          description: 'retun all posts on categories'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
  /api/post:
    put:
      tags:
        - post
      summary: 'Update post per id'
      operationId: api.post.update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                id:
                  type: integer
                  example: '9'
                title:
                  type: string
                  example: 'How to create react app'
                text:
                  type: string
                  example: 'I like codding in react'
                author_id:
                  type: integer
                  example: '2'
                category_id:
                  type: integer
                  example: '2'
              type: object
      responses:
        '200':
          description: 'return post'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: 'return error if post is not exists'
          content:
            application/json:
              schema:
                properties:
                  error: { type: string, example: 'not found' }
                type: object
    post:
      tags:
        - post
      summary: 'Add post'
      operationId: api.post.store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      responses:
        '200':
          description: 'return new created post'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
  '/api/post/{$id}':
    get:
      tags:
        - post
      summary: 'Show post per id'
      operationId: api.post.show
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                id:
                  type: integer
                  example: '9'
              type: object
      responses:
        '200':
          description: 'return category'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: 'return error if post is not exists'
          content:
            application/json:
              schema:
                properties:
                  error: { type: string, example: 'not found' }
                type: object
    delete:
      tags:
        - post
      summary: 'Delete post per id'
      operationId: api.post.destroy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                id:
                  type: integer
                  example: '9'
              type: object
      responses:
        '200':
          description: 'return message'
          content:
            application/json:
              schema:
                properties:
                  string: { type: string, example: 'deleted post: 9' }
                type: object
        '400':
          description: 'return error if post is not exists'
          content:
            application/json:
              schema:
                properties:
                  error: { type: string, example: 'not found' }
                type: object
components:
  schemas:
    ValidationError:
      properties:
        message:
          type: string
          example: 'The given data was invalid.'
        errors:
          properties:
            'key 1':
              type: array
              items:
                type: string
                example: 'Error message 1'
            'key 2':
              type: array
              items:
                type: string
                example: 'Error message 2'
          type: object
      type: object
    LoginRequest:
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          example: '123456'
      type: object
    RegisterRequest:
      required:
        - name
        - email
        - password
        - password_confirmation
      properties:
        name:
          type: string
          example: 'John Doe'
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          example: '123456'
        password_confirmation:
          type: string
          example: '123456'
      type: object
    CategoryResponse:
      properties:
        id:
          type: integer
          example: '1'
        name:
          type: string
          example: News
        post_count:
          type: integer
          example: '3'
        created_at:
          type: string
          format: date-time
          example: '2024-02-06T19:22:50.000000Z'
        updated_at:
          type: string
          format: date-time
          example: '2024-02-06T19:22:50.000000Z'
      type: object
    CategoryRequest:
      properties:
        name:
          type: string
          example: News
      type: object
    PostRequest:
      properties:
        title:
          type: string
          example: 'How to create react app'
        text:
          type: string
          example: 'I like codding in react'
        author_id:
          type: integer
          example: '2'
        category_id:
          type: integer
          example: '2'
      type: object
    PostResponse:
      properties:
        title:
          type: string
          example: 'How to create react app'
        text:
          type: string
          example: 'I like codding in react'
        author_id:
          type: integer
          example: '2'
        category_id:
          type: integer
          example: '2'
        created_at:
          type: string
          format: date-time
          example: '2024-02-06T19:22:50.000000Z'
        updated_at:
          type: string
          format: date-time
          example: '2024-02-06T19:22:50.000000Z'
      type: object
    SuccessLoginResource:
      properties:
        status:
          type: string
          example: 'true'
        user:
          $ref: '#/components/schemas/User'
        authorisation:
          $ref: '#/components/schemas/TokenResource'
      type: object
    TokenResource:
      properties:
        token:
          type: string
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0L2FwaS9hdXRoL3JlZ2lzdGVyIiwiaWF0IjoxNzA2NTUyMTM4LCJleHAiOjE3MDY5MTIxMzgsIm5iZiI6MTcwNjU1MjEzOCwianRpIjoiRk9hclkyZ2VvckhPT1llbSIsInN1YiI6IjQiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3IiwiZW1haWwiOiJ2YXN5YTJAdmFzeWEuY29tIiwibmFtZSI6InZhc3lhMiJ9.APeVTaT7gnkVVboKkfXDndq1vjQFiiaMPCw21aS9hL8
        type:
          type: string
          example: bearer
      type: object
    User:
      properties:
        id:
          type: integer
          example: '2'
        name:
          type: string
          example: 'John Doe'
        email:
          type: string
          format: email
          example: john@example.com
        email_verified:
          type: boolean
          example: '1'
        created_at:
          type: string
          format: date-time
          example: '2024-02-03T21:06:04.000000Z'
        updated_at:
          type: string
          format: date-time
          example: '2024-02-03T21:06:04.000000Z'
        confirmation_token:
          type: url
          example: 8ccde004-4c26-453e-a3f7-a73145dfb4a1
        avatar_url:
          type: string
          example: 'http://localhost/storage/avatars/108/original.webp'
      type: object
  securitySchemes:
    BearerToken:
      type: http
      bearerFormat: JWT
      scheme: bearer
tags:
  -
    name: auth
    description: 'User authentication'
  -
    name: post
    description: 'Операции с постами'
